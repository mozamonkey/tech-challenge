{"ast":null,"code":"import { FETCHED_USER, FETCH_USER_START, FETCH_USER_ERROR, RESET_USER, FETCHED_USER_ALBUM, FETCH_USER_ALBUM_START, FETCH_USER_ALBUM_ERROR, FETCH_USER_ALBUM_PHOTOS_ERROR, FETCHED_USER_ALBUM_PHOTOS, FETCH_USER_ALBUM_PHOTOS_START } from './types';\nconst BASE_URL = 'https://jsonplaceholder.typicode.com';\nexport function startFetchingUser() {\n  return {\n    type: FETCH_USER_START\n  };\n}\nexport function startFetchingAlbum() {\n  return {\n    type: FETCH_USER_ALBUM_START\n  };\n}\nexport function startFetchingAlbumPhotos() {\n  return {\n    type: FETCH_USER_ALBUM_PHOTOS_START\n  };\n}\nexport function GetUsers() {\n  const uri = `${BASE_URL}/users`;\n  let postFetchParams = {\n    method: 'GET',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    mode: 'cors'\n  };\n  return fetch(uri, postFetchParams).then(httpResponse => {\n    return httpResponse.json();\n  }).then(data => {\n    if (!data) {\n      // now call our reducers and pass in the type of FETCH_USER_ERROR\n      // the payload will be the message\n      return {\n        type: FETCH_USER_ERROR,\n        payload: \"Failed to fetch users\"\n      };\n    } // the response will contain email, firstName, lastName, token\n    // and userNumber\n\n\n    return {\n      type: FETCHED_USER,\n      payload: data\n    };\n  });\n}\nexport function GetUserAlbum(userId) {\n  const uri = `${BASE_URL}/albums?userId=${userId}`;\n  let postFetchParams = {\n    method: 'GET',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    mode: 'cors'\n  };\n  return fetch(uri, postFetchParams).then(httpResponse => {\n    return httpResponse.json();\n  }).then(data => {\n    if (!data) {\n      return {\n        type: FETCH_USER_ALBUM_ERROR,\n        payload: \"Failed to fetch user albums\"\n      };\n    }\n\n    return {\n      type: FETCHED_USER_ALBUM,\n      payload: data\n    };\n  });\n}\nexport function GetUserAlbumPhotos(albumId) {\n  const uri = `${BASE_URL}/photos?albumId=${albumId}`;\n  let postFetchParams = {\n    method: 'GET',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    mode: 'cors'\n  };\n  return fetch(uri, postFetchParams).then(httpResponse => {\n    return httpResponse.json();\n  }).then(data => {\n    if (!data) {\n      return {\n        type: FETCH_USER_ALBUM_PHOTOS_ERROR,\n        payload: \"Failed to fetch user albums photos\"\n      };\n    }\n\n    return {\n      type: FETCHED_USER_ALBUM_PHOTOS,\n      payload: data\n    };\n  });\n}","map":{"version":3,"sources":["/Users/mathewmozaffari/Downloads/photoAlbum 2/src/actions/UserActions.js"],"names":["FETCHED_USER","FETCH_USER_START","FETCH_USER_ERROR","RESET_USER","FETCHED_USER_ALBUM","FETCH_USER_ALBUM_START","FETCH_USER_ALBUM_ERROR","FETCH_USER_ALBUM_PHOTOS_ERROR","FETCHED_USER_ALBUM_PHOTOS","FETCH_USER_ALBUM_PHOTOS_START","BASE_URL","startFetchingUser","type","startFetchingAlbum","startFetchingAlbumPhotos","GetUsers","uri","postFetchParams","method","headers","Headers","mode","fetch","then","httpResponse","json","data","payload","GetUserAlbum","userId","GetUserAlbumPhotos","albumId"],"mappings":"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","sourcesContent":["import { \n  FETCHED_USER, \n  FETCH_USER_START, \n  FETCH_USER_ERROR, \n  RESET_USER,\n\n  FETCHED_USER_ALBUM,\n  FETCH_USER_ALBUM_START,\n  FETCH_USER_ALBUM_ERROR,\n\n  FETCH_USER_ALBUM_PHOTOS_ERROR,\n  FETCHED_USER_ALBUM_PHOTOS,\n  FETCH_USER_ALBUM_PHOTOS_START\n} from './types';\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com'\n\nexport function startFetchingUser() {\n  return({type: FETCH_USER_START});\n}\n\nexport function startFetchingAlbum() {\n  return({type: FETCH_USER_ALBUM_START});\n}\n\nexport function startFetchingAlbumPhotos() {\n  return({type: FETCH_USER_ALBUM_PHOTOS_START});\n}\n\nexport function GetUsers()\n{\n  const uri = `${BASE_URL}/users`;\n\n  let postFetchParams = {\n    method: 'GET',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    mode: 'cors',\n  };\n\n  return fetch(uri, postFetchParams)\n    .then(httpResponse => {\n      return httpResponse.json();\n    })\n    .then(data => {\n      if (!data) {\n        // now call our reducers and pass in the type of FETCH_USER_ERROR\n        // the payload will be the message\n        return({type: FETCH_USER_ERROR, payload: \"Failed to fetch users\"});\n      }\n\n      // the response will contain email, firstName, lastName, token\n      // and userNumber\n      return({type: FETCHED_USER, payload: data});\n    });\n}\n\nexport function GetUserAlbum(userId)\n{\n  const uri = `${BASE_URL}/albums?userId=${userId}`;\n\n  let postFetchParams = {\n    method: 'GET',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    mode: 'cors',\n  };\n\n  return fetch(uri, postFetchParams)\n    .then(httpResponse => {\n      return httpResponse.json();\n    })\n    .then(data => {\n      if (!data) {\n        return({type: FETCH_USER_ALBUM_ERROR, payload: \"Failed to fetch user albums\"});\n      }\n\n      return({type: FETCHED_USER_ALBUM, payload: data});\n    });\n}\n\nexport function GetUserAlbumPhotos(albumId)\n{\n  const uri = `${BASE_URL}/photos?albumId=${albumId}`;\n\n  let postFetchParams = {\n    method: 'GET',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    mode: 'cors',\n  };\n\n  return fetch(uri, postFetchParams)\n    .then(httpResponse => {\n      return httpResponse.json();\n    })\n    .then(data => {\n      if (!data) {\n        return({type: FETCH_USER_ALBUM_PHOTOS_ERROR, payload: \"Failed to fetch user albums photos\"});\n      }\n\n      return({type: FETCHED_USER_ALBUM_PHOTOS, payload: data});\n    });\n}"]},"metadata":{},"sourceType":"module"}